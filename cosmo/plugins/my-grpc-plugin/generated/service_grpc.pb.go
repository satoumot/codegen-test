// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: generated/service.proto

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MyGrpcPluginService_MutationCreateCart_FullMethodName    = "/service.MyGrpcPluginService/MutationCreateCart"
	MyGrpcPluginService_MutationPayOrder_FullMethodName      = "/service.MyGrpcPluginService/MutationPayOrder"
	MyGrpcPluginService_MutationPlaceOrder_FullMethodName    = "/service.MyGrpcPluginService/MutationPlaceOrder"
	MyGrpcPluginService_MutationRefundOrder_FullMethodName   = "/service.MyGrpcPluginService/MutationRefundOrder"
	MyGrpcPluginService_MutationWorkflowOrder_FullMethodName = "/service.MyGrpcPluginService/MutationWorkflowOrder"
	MyGrpcPluginService_QueryCart_FullMethodName             = "/service.MyGrpcPluginService/QueryCart"
	MyGrpcPluginService_QueryProduct_FullMethodName          = "/service.MyGrpcPluginService/QueryProduct"
)

// MyGrpcPluginServiceClient is the client API for MyGrpcPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for MyGrpcPluginService
type MyGrpcPluginServiceClient interface {
	MutationCreateCart(ctx context.Context, in *MutationCreateCartRequest, opts ...grpc.CallOption) (*MutationCreateCartResponse, error)
	MutationPayOrder(ctx context.Context, in *MutationPayOrderRequest, opts ...grpc.CallOption) (*MutationPayOrderResponse, error)
	MutationPlaceOrder(ctx context.Context, in *MutationPlaceOrderRequest, opts ...grpc.CallOption) (*MutationPlaceOrderResponse, error)
	MutationRefundOrder(ctx context.Context, in *MutationRefundOrderRequest, opts ...grpc.CallOption) (*MutationRefundOrderResponse, error)
	MutationWorkflowOrder(ctx context.Context, in *MutationWorkflowOrderRequest, opts ...grpc.CallOption) (*MutationWorkflowOrderResponse, error)
	QueryCart(ctx context.Context, in *QueryCartRequest, opts ...grpc.CallOption) (*QueryCartResponse, error)
	QueryProduct(ctx context.Context, in *QueryProductRequest, opts ...grpc.CallOption) (*QueryProductResponse, error)
}

type myGrpcPluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyGrpcPluginServiceClient(cc grpc.ClientConnInterface) MyGrpcPluginServiceClient {
	return &myGrpcPluginServiceClient{cc}
}

func (c *myGrpcPluginServiceClient) MutationCreateCart(ctx context.Context, in *MutationCreateCartRequest, opts ...grpc.CallOption) (*MutationCreateCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationCreateCartResponse)
	err := c.cc.Invoke(ctx, MyGrpcPluginService_MutationCreateCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myGrpcPluginServiceClient) MutationPayOrder(ctx context.Context, in *MutationPayOrderRequest, opts ...grpc.CallOption) (*MutationPayOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationPayOrderResponse)
	err := c.cc.Invoke(ctx, MyGrpcPluginService_MutationPayOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myGrpcPluginServiceClient) MutationPlaceOrder(ctx context.Context, in *MutationPlaceOrderRequest, opts ...grpc.CallOption) (*MutationPlaceOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationPlaceOrderResponse)
	err := c.cc.Invoke(ctx, MyGrpcPluginService_MutationPlaceOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myGrpcPluginServiceClient) MutationRefundOrder(ctx context.Context, in *MutationRefundOrderRequest, opts ...grpc.CallOption) (*MutationRefundOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationRefundOrderResponse)
	err := c.cc.Invoke(ctx, MyGrpcPluginService_MutationRefundOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myGrpcPluginServiceClient) MutationWorkflowOrder(ctx context.Context, in *MutationWorkflowOrderRequest, opts ...grpc.CallOption) (*MutationWorkflowOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationWorkflowOrderResponse)
	err := c.cc.Invoke(ctx, MyGrpcPluginService_MutationWorkflowOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myGrpcPluginServiceClient) QueryCart(ctx context.Context, in *QueryCartRequest, opts ...grpc.CallOption) (*QueryCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCartResponse)
	err := c.cc.Invoke(ctx, MyGrpcPluginService_QueryCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myGrpcPluginServiceClient) QueryProduct(ctx context.Context, in *QueryProductRequest, opts ...grpc.CallOption) (*QueryProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProductResponse)
	err := c.cc.Invoke(ctx, MyGrpcPluginService_QueryProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyGrpcPluginServiceServer is the server API for MyGrpcPluginService service.
// All implementations must embed UnimplementedMyGrpcPluginServiceServer
// for forward compatibility.
//
// Service definition for MyGrpcPluginService
type MyGrpcPluginServiceServer interface {
	MutationCreateCart(context.Context, *MutationCreateCartRequest) (*MutationCreateCartResponse, error)
	MutationPayOrder(context.Context, *MutationPayOrderRequest) (*MutationPayOrderResponse, error)
	MutationPlaceOrder(context.Context, *MutationPlaceOrderRequest) (*MutationPlaceOrderResponse, error)
	MutationRefundOrder(context.Context, *MutationRefundOrderRequest) (*MutationRefundOrderResponse, error)
	MutationWorkflowOrder(context.Context, *MutationWorkflowOrderRequest) (*MutationWorkflowOrderResponse, error)
	QueryCart(context.Context, *QueryCartRequest) (*QueryCartResponse, error)
	QueryProduct(context.Context, *QueryProductRequest) (*QueryProductResponse, error)
	mustEmbedUnimplementedMyGrpcPluginServiceServer()
}

// UnimplementedMyGrpcPluginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMyGrpcPluginServiceServer struct{}

func (UnimplementedMyGrpcPluginServiceServer) MutationCreateCart(context.Context, *MutationCreateCartRequest) (*MutationCreateCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutationCreateCart not implemented")
}
func (UnimplementedMyGrpcPluginServiceServer) MutationPayOrder(context.Context, *MutationPayOrderRequest) (*MutationPayOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutationPayOrder not implemented")
}
func (UnimplementedMyGrpcPluginServiceServer) MutationPlaceOrder(context.Context, *MutationPlaceOrderRequest) (*MutationPlaceOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutationPlaceOrder not implemented")
}
func (UnimplementedMyGrpcPluginServiceServer) MutationRefundOrder(context.Context, *MutationRefundOrderRequest) (*MutationRefundOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutationRefundOrder not implemented")
}
func (UnimplementedMyGrpcPluginServiceServer) MutationWorkflowOrder(context.Context, *MutationWorkflowOrderRequest) (*MutationWorkflowOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutationWorkflowOrder not implemented")
}
func (UnimplementedMyGrpcPluginServiceServer) QueryCart(context.Context, *QueryCartRequest) (*QueryCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCart not implemented")
}
func (UnimplementedMyGrpcPluginServiceServer) QueryProduct(context.Context, *QueryProductRequest) (*QueryProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProduct not implemented")
}
func (UnimplementedMyGrpcPluginServiceServer) mustEmbedUnimplementedMyGrpcPluginServiceServer() {}
func (UnimplementedMyGrpcPluginServiceServer) testEmbeddedByValue()                             {}

// UnsafeMyGrpcPluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyGrpcPluginServiceServer will
// result in compilation errors.
type UnsafeMyGrpcPluginServiceServer interface {
	mustEmbedUnimplementedMyGrpcPluginServiceServer()
}

func RegisterMyGrpcPluginServiceServer(s grpc.ServiceRegistrar, srv MyGrpcPluginServiceServer) {
	// If the following call pancis, it indicates UnimplementedMyGrpcPluginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MyGrpcPluginService_ServiceDesc, srv)
}

func _MyGrpcPluginService_MutationCreateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutationCreateCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyGrpcPluginServiceServer).MutationCreateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyGrpcPluginService_MutationCreateCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyGrpcPluginServiceServer).MutationCreateCart(ctx, req.(*MutationCreateCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyGrpcPluginService_MutationPayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutationPayOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyGrpcPluginServiceServer).MutationPayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyGrpcPluginService_MutationPayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyGrpcPluginServiceServer).MutationPayOrder(ctx, req.(*MutationPayOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyGrpcPluginService_MutationPlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutationPlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyGrpcPluginServiceServer).MutationPlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyGrpcPluginService_MutationPlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyGrpcPluginServiceServer).MutationPlaceOrder(ctx, req.(*MutationPlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyGrpcPluginService_MutationRefundOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutationRefundOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyGrpcPluginServiceServer).MutationRefundOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyGrpcPluginService_MutationRefundOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyGrpcPluginServiceServer).MutationRefundOrder(ctx, req.(*MutationRefundOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyGrpcPluginService_MutationWorkflowOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutationWorkflowOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyGrpcPluginServiceServer).MutationWorkflowOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyGrpcPluginService_MutationWorkflowOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyGrpcPluginServiceServer).MutationWorkflowOrder(ctx, req.(*MutationWorkflowOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyGrpcPluginService_QueryCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyGrpcPluginServiceServer).QueryCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyGrpcPluginService_QueryCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyGrpcPluginServiceServer).QueryCart(ctx, req.(*QueryCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyGrpcPluginService_QueryProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyGrpcPluginServiceServer).QueryProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyGrpcPluginService_QueryProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyGrpcPluginServiceServer).QueryProduct(ctx, req.(*QueryProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MyGrpcPluginService_ServiceDesc is the grpc.ServiceDesc for MyGrpcPluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyGrpcPluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.MyGrpcPluginService",
	HandlerType: (*MyGrpcPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MutationCreateCart",
			Handler:    _MyGrpcPluginService_MutationCreateCart_Handler,
		},
		{
			MethodName: "MutationPayOrder",
			Handler:    _MyGrpcPluginService_MutationPayOrder_Handler,
		},
		{
			MethodName: "MutationPlaceOrder",
			Handler:    _MyGrpcPluginService_MutationPlaceOrder_Handler,
		},
		{
			MethodName: "MutationRefundOrder",
			Handler:    _MyGrpcPluginService_MutationRefundOrder_Handler,
		},
		{
			MethodName: "MutationWorkflowOrder",
			Handler:    _MyGrpcPluginService_MutationWorkflowOrder_Handler,
		},
		{
			MethodName: "QueryCart",
			Handler:    _MyGrpcPluginService_QueryCart_Handler,
		},
		{
			MethodName: "QueryProduct",
			Handler:    _MyGrpcPluginService_QueryProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generated/service.proto",
}
